Lab 2 - Dang Quang Viet Anh - 20205140

*QUES 1: When should accessor methods be used?
	Answer : 
	Accessor methods (also known as getter methods) in Java are used to retrieve and return the value of properties in an object.
	They are used to ensure closure and control access to the object's data.
	Here are some cases when you should use accessor methods in Java:
	1.When you want to protect an object's data: By using accessor methods, you can ensure that an object's properties can only be accessed and changed through the object's methods. This helps prevent errors that occur when users change the value of the property improperly or inappropriately.

	2.When you want to control access to an object's data: Using accessor methods allows you to control access to the object's data. 
	You can add a test condition before returning the value of the property or change the value of the property.

	3.When you want to provide information about the object: Accessor methods can be used to provide information about the object to the user. 
	For example, the getName() method of a Person object can be used to return the person's name.

	4.When you want to change the value of a property based on a condition: Accessor methods can also be used to change the value of a property based on a certain condition. 
	For example, the setAge() method of a Person object can be used to change the value of the age property only if the newly supplied value is valid (for example, non-negative and less than 120).

	=> In a nutshell, using accessor methods can help you ensure object encapsulation, control, and data protection.
	
QUES 2: If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
	Answer:
	Yes, Java allows you to create multiple constructor methods in a class, including constructors with different parameter lists. 
	This feature is called constructor overloading.

	In this case, where you want to create a constructor method to build a DVD by title and another constructor method to build a DVD by category, it is completely valid in Java. 
	Here's an example:
	
		public class DigitalVideoDisc {
		private String title;
		private String category;
		private String director;
		private int length;
		private float cost;

		public DigitalVideoDisc(String title) {
			this.title = title;
		}

		public DigitalVideoDisc(String category, String title, float cost) {
			this.category = category;
			this.title = title;
			this.cost = cost;
		}

		// Other constructors and methods...
		}
	
	In the above code, we have two constructor methods: one that takes only the title as a parameter and another that takes category, title, and cost as parameters. 
	Both constructor methods have different parameter lists, allowing you to create a DVD object by providing different sets of values.
	By using constructor overloading, you can provide flexibility in creating objects by allowing different combinations of input parameters, based on the needs of your application.
